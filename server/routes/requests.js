/* eslint-disable no-await-in-loop */
// all api routes
/* eslint-disable import/extensions */
import express from 'express';
import mailchimp from '../mailchimp.js';

import {
  createEvent,
  patchEvent,
  getAllProfiles,
  getModules,
  getModulebyId,
  getGoogleaccount,
  updateTextField,
  getUsernames,
  getMessages,
  addToMailchimpList,
  updateMailchimpList,
  sendMailchimpEmails,
  updateModuleChildren,
} from '../controllers/controllers.js';

const router = express.Router();

router.get('/', (req, res) => {
  res.send('We are live!');
});

// creates an event on google calendar
router.post('/createEvent', createEvent);

// updates an event on google calendar
router.patch('/patchEvent', patchEvent);

// gets all profiles from firebase collection "profiles"
router.get('/getAllProfiles', getAllProfiles);

// gets all modules from firebase collection "modules"
router.get('/getModules/:currRole', getModules);

// gets a module by ID, and returns that module and all of its direct children
router.get('/getModulebyId/:id/:currRole', getModulebyId);

// gets profile via google email
router.get('/getGoogleaccount/:googleAccount', getGoogleaccount);

// updating module's text field
router.get('/updateTextField/:inputText/:id', updateTextField);

// gets existing users' usernames (for sign up username conflicts)
router.get('/getUsernames', getUsernames);

// adds a module to firebase
// then adds new module to the parent's children array
router.post('/updateModuleChildren', updateModuleChildren);

router.get('/getMessages', getMessages);

// mailchimp routes
router.post('/mailchimp/addToList', addToMailchimpList);

router.post('/mailchimp/updateList', updateMailchimpList);

router.post('/mailchimp/sendEmail', sendMailchimpEmails);

// for testing purposes (can remove from end product) REMOVE BEFORE DEPLOYMENT but keep since it could help with future debugging

router.get('/mailchimp/segments/viewAll', async (req, res) => {
  const response = await mailchimp.lists.listSegments(process.env.MAILCHIMP_AUDIENCE_ID);
  res.status(202).json(response);
});

router.get('/mailchimp/campaigns/viewAll', async (req, res) => {
  const response = await mailchimp.campaigns.list();
  res.status(202).json(response);
});

router.get('/mailchimp/templates/viewAll', async (req, res) => {
  const response = await mailchimp.templates.list();
  res.status(202).json(response);
});

router.get('/mailchimp', async (req, res) => {
  try {
    const response = await mailchimp.root.getRoot();
    res.send(response);
  } catch (error) {
    console.error(error.message);
    res.status(401).json(error.message);
    // console.log(`Error in mailchimp endpoint ${error.message}`);
  }
});

// router.post('/mailchimp/createList', async (req, res) => {
//   try {
//     const response = await mailchimp.lists.createList({
//       name: req.body.name,
//       permission_reminder: 'permission_reminder',
//       email_type_option: true,
//       contact: {
//         company: 'Friends of The Children',
//         city: 'Portland',
//         country: 'US',
//         address1: '44 NE Morris St.',
//         state: 'Oregon', // not required
//         zip: '97212', // not required
//       },
//       campaign_defaults: {
//         from_name: req.body.from_name,
//         from_email: req.body.from_email,
//         subject: 'New Admin Announcement!',
//         language: 'EN_US',
//       },
//     });

//     console.log(`Created list ${req.body.name} successfully`);
//     res.status(202).json(response);
//   } catch (error) {
//     // console.log(`Error in mailchimp createlist endpoint ${error.message}`);
//     res.status(401).json(error.message);
//   }
// });

// router.post('/mailchimp/createMergeField', async (req, res) => {
//   try {
//     const response = await mailchimp.lists.addListMergeField(process.env.MAILCHIMP_AUDIENCE_ID, {
//       name: req.body.name,
//       type: req.body.type,
//     });
//     console.log(`Created merge field ${req.body.name} successfully`);
//     res.status(202).json(response);
//   } catch (error) {
//     // console.log(`error generated by merge field endpoint: ${error.message}`);
//     res.status(401).json(error.message);
//   }
// });

export default router;
